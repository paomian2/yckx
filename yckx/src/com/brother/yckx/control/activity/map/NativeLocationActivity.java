package com.brother.yckx.control.activity.map;

import java.util.HashMap;
import java.util.List;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.TextView;

import com.amap.api.location.AMapLocation;
import com.amap.api.location.AMapLocationClient;
import com.amap.api.location.AMapLocationClientOption;
import com.amap.api.location.AMapLocationClientOption.AMapLocationMode;
import com.amap.api.location.AMapLocationListener;
import com.amap.api.maps2d.AMap;
import com.amap.api.maps2d.AMap.OnMarkerClickListener;
import com.amap.api.maps2d.CameraUpdateFactory;
import com.amap.api.maps2d.LocationSource;
import com.amap.api.maps2d.MapView;
import com.amap.api.maps2d.UiSettings;
import com.amap.api.maps2d.model.BitmapDescriptorFactory;
import com.amap.api.maps2d.model.LatLng;
import com.amap.api.maps2d.model.Marker;
import com.amap.api.maps2d.model.MarkerOptions;
import com.amap.api.maps2d.model.MyLocationStyle;
import com.brother.BaseActivity;
import com.brother.utils.GlobalServiceUtils;
import com.brother.utils.WEBInterface;
import com.brother.utils.net.ApacheHttpUtil;
import com.brother.utils.parse.ParseJSONUtils;
import com.brother.yckx.R;
import com.brother.yckx.model.BusinessEntity;

public class NativeLocationActivity extends BaseActivity implements LocationSource,
AMapLocationListener,OnMarkerClickListener{
	private AMap aMap;
	private UiSettings mUiSettings;
	private MapView mapView;
	private OnLocationChangedListener mListener;
	private AMapLocationClient mlocationClient;
	private AMapLocationClientOption mLocationOption;
	//marke
	private MarkerOptions markerOption;
	private Marker marker;
	private BusinessEntity businessEntity=null;
	private String mlat,mlng;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_nativelocation);
		mapView = (MapView) findViewById(R.id.mapView);
		mapView.onCreate(savedInstanceState);// 此方法必须重写
		init();
	}

	private void init() {
		if (aMap == null) {
			aMap = mapView.getMap();
			setUpMap();
		}
		businessEntity=(BusinessEntity) getIntent().getSerializableExtra("NativeLocationActivity");
        TextView tv_companyName=(TextView) findViewById(R.id.companyName);
        TextView tv_companyAdress=(TextView) findViewById(R.id.companyAdress);
        tv_companyName.setText(businessEntity.getCompanyName());
        tv_companyAdress.setText(businessEntity.getAddress());
        //驾车导航
        findViewById(R.id.drive).setOnClickListener(new OnClickListener(){
			@Override
			public void onClick(View arg0) {
				GlobalServiceUtils.setGloubalServiceSession("lat", mlat);
				GlobalServiceUtils.setGloubalServiceSession("lng", mlng);
				Intent intent=new Intent(NativeLocationActivity.this,DriveMapBaseActivity.class);
				intent.putExtra("DriveMapBaseActivity", businessEntity);
				startActivity(intent);
			}});
        //步行导航
        findViewById(R.id.walk).setOnClickListener(new OnClickListener(){
			@Override
			public void onClick(View arg0) {
				GlobalServiceUtils.setGloubalServiceSession("lat", mlat);
				GlobalServiceUtils.setGloubalServiceSession("lng", mlng);
				Intent intent=new Intent(NativeLocationActivity.this,WalkMapBaseActivity.class);
				intent.putExtra("WalkMapBaseActivity", businessEntity);
				startActivity(intent);
			}});
	}

	/**
	 * 设置一些amap的属性
	 */
	private void setUpMap() {
		// 自定义系统定位小蓝点
		MyLocationStyle myLocationStyle = new MyLocationStyle();
		myLocationStyle.myLocationIcon(BitmapDescriptorFactory
				.fromResource(R.drawable.location_marker));// 设置小蓝点的图标
		myLocationStyle.strokeColor(Color.BLACK);// 设置圆形的边框颜色
		myLocationStyle.radiusFillColor(Color.argb(100, 0, 0, 180));// 设置圆形的填充颜色
		// myLocationStyle.anchor(int,int)//设置小蓝点的锚点
		myLocationStyle.strokeWidth(1.0f);// 设置圆形的边框粗细
		aMap.setMyLocationStyle(myLocationStyle);
		aMap.setLocationSource(this);// 设置定位监听
		aMap.getUiSettings().setMyLocationButtonEnabled(false);// 设置默认定位按钮是否显示
		aMap.setMyLocationEnabled(true);// 设置为true表示显示定位层并可触发定位，false表示隐藏定位层并不可触发定位，默认是false
		// aMap.setMyLocationType()
		aMap.moveCamera(CameraUpdateFactory.zoomTo(12));//设置缩放级别
		aMap.setOnMarkerClickListener(this);// 设置点击marker事件监听器
		mUiSettings = aMap.getUiSettings();
		mUiSettings.setScaleControlsEnabled(false);//比例尺显示
		mUiSettings.setZoomControlsEnabled(false);//设置手动改变比例尺
		mUiSettings.setCompassEnabled(false);//设置指南针
		//aMap.setOnInfoWindowClickListener(this);// 设置点击infoWindow事件监听器
		//aMap.setInfoWindowAdapter(this);// 设置自定义InfoWindow样式
		//addMarkersToMap();// 往地图上添加marker
	}


	//-----marker--- start---//
	/**
	 * 在地图上添加marker
	 * 
	 */
	private void addMarkersToMap(LatLng latlng,BusinessEntity businessEntity) {
		//文字显示标注，可以设置显示内容，位置，字体大小颜色，背景色旋转角度,Z值等
		markerOption = new MarkerOptions();
		markerOption.position(latlng);
		markerOption.title(businessEntity.getCompanyName()).snippet(businessEntity.getDescription());
		markerOption.icon(BitmapDescriptorFactory.fromResource(R.drawable.icon_marker_small));
		marker = aMap.addMarker(markerOption);
		/*marker.setObject(businessEntity);
		marker.showInfoWindow();*/
	}

	/**
	 * 方法必须重写
	 */
	@Override
	protected void onResume() {
		super.onResume();
		mapView.onResume();
	}

	/**
	 * 方法必须重写
	 */
	@Override
	protected void onPause() {
		super.onPause();
		mapView.onPause();
		deactivate();
	}

	/**
	 * 方法必须重写
	 */
	@Override
	protected void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		mapView.onSaveInstanceState(outState);
	}

	/**
	 * 方法必须重写
	 */
	@Override
	protected void onDestroy() {
		super.onDestroy();
		mapView.onDestroy();
	}

	/**
	 * 定位成功后回调函数
	 */
	@Override
	public void onLocationChanged(AMapLocation amapLocation) {
		if (mListener != null && amapLocation != null) {
			if (amapLocation != null
					&& amapLocation.getErrorCode() == 0) {
				mListener.onLocationChanged(amapLocation);// 显示系统小蓝点
				double lat=amapLocation.getLatitude();
				double lng=amapLocation.getLongitude();
				GlobalServiceUtils.setGloubalServiceSession("starNativeLat", lat);
				GlobalServiceUtils.setGloubalServiceSession("starNativeLng", lng);
			} else {
				String errText = "定位失败," + amapLocation.getErrorCode()+ ": " + amapLocation.getErrorInfo();
				Log.e("yckx",errText);
			}
		}
	}

	/**
	 * 激活定位
	 */
	@Override
	public void activate(OnLocationChangedListener listener) {
		mListener = listener;
		if (mlocationClient == null) {
			mlocationClient = new AMapLocationClient(this);
			mLocationOption = new AMapLocationClientOption();
			//设置定位监听
			mlocationClient.setLocationListener(this);
			//设置为高精度定位模式
			mLocationOption.setLocationMode(AMapLocationMode.Hight_Accuracy);
			//设置定位参数
			mlocationClient.setLocationOption(mLocationOption);
			// 此方法为每隔固定时间会发起一次定位请求，为了减少电量消耗或网络流量消耗，
			// 注意设置合适的定位时间的间隔（最小间隔支持为2000ms），并且在合适时间调用stopLocation()方法来取消定位请求
			// 在定位结束后，在合适的生命周期调用onDestroy()方法
			// 在单次定位情况下，定位无论成功与否，都无需调用stopLocation()方法移除请求，定位sdk内部会移除
			mlocationClient.startLocation();
		}
	}

	/**
	 * 停止定位
	 */
	@Override
	public void deactivate() {
		mListener = null;
		if (mlocationClient != null) {
			mlocationClient.stopLocation();
			mlocationClient.onDestroy();
		}
		mlocationClient = null;
	}

	@Override
	public boolean onMarkerClick(Marker arg0) {
		// TODO Auto-generated method stub
		return false;
	}



	private final int LOAD_LAT_LNG_BS_MESSAGE_SUCCESS=1;
	@SuppressLint("HandlerLeak")
	private Handler mHandler=new Handler(){
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case LOAD_LAT_LNG_BS_MESSAGE_SUCCESS://选择第一个商家，进入到二级页面
				//显示对应的推荐商家信息
				//
				@SuppressWarnings("unchecked")
				List<BusinessEntity> list=(List<BusinessEntity>) msg.obj;
				for(int i=0;i<list.size();i++){
					double lat_marke=Double.parseDouble(list.get(i).getLocation_lat());
					double lng_marke=Double.parseDouble(list.get(i).getLocation_lng());
					LatLng latlng_marke=new LatLng(lat_marke, lng_marke);
					addMarkersToMap(latlng_marke,list.get(i));
				}
				break;
			}
		};
	};

}
